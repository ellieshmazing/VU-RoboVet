============================================================
Reference Documents:
- Scenario examples: ScenarioCompilation.xlsx
- Tool examples: simulationTools.xlsx
- Tool creation guide: ToolCreationInstructions.txt
- Simulation goal examples: simulationGoals.xlsx
- Simulation goal creation guide: GoalCreationInstructions.txt
============================================================

Overview
- Purpose: Template-driven workflow for JSON scenarios used by Call-E.
- Output: Scenario matching format of those in ScenarioCompilation.xlsx.
- Flow: Complete Sections 0-1; pass validation before moving on.

Step 0: Basic Information
- Caller Name: [First, Last]
- Caller Goal: One concise sentence from caller's perspective
- Validate: purpose concisde; name clear.

Step 1: Scenario Flow
- Goal: Iteratively create a Mermaid flowchart representing the possible routes for the scenario to take.
- Start: Create Mermaid flowchart code (flowchart TD) with a start node with the caller calling in. Connect it to an introduction goalNode, then a q_node for the next step of the call. Do not add any further nodes.
- Process: Ask the user to describe the content for any q_nodes. Transform q_nodes into goalNodes or toolNodes as needed, then add new q_nodes for the next steps. Do not add an endCall node until specified by the user. Recreate the Mermaid code with the updated paths.
- Loop: Repeat the "Process" step until every route of the flowchart terminates with an endCall toolNode.
- When a node requires details you don't have yet, add a placeholder "question node" and surface it back to the user:
  - Syntax: use a distinct node id with a 'q_' prefix and a trailing '?' in the label, e.g., q_email?["Verify email?"]
  - After rendering the chart, output a concise "Missing nodes" list of all q_* nodes with a brief description of the needed info.
  - Keep q_* node ids stable between iterations until resolved. When the user supplies details, replace the q_* node with a finalized node and remove it from the list.
- Continue until every path ends with the endCall tool and there are no q_* leaf nodes remaining.
- Every toolNode and goalNode should lead to two separate paths, indicating the success and failure paths of the tool.
- Every toolNode and goalNode should be formatted with the simulationTool/simulationGoal name, followed by a colon and a description of the node. When possible, use simulationGoals from the Simulation goal examples and simulationTools from the Tool examples. Create new simulationGals and simulationTools as necessary.
- Use the following classes to style nodes:
  - missingNode: classDef missingNode fill:#fff3cd,stroke:#d39e00,stroke-width:2px,color:#7a5c00
  - goalNode: classDef toolNode fill:#B3F0FF,stroke:#4BACC4,stroke-width:2px,color:#005D96
  - toolNode: classDef goalNode fill:#FFDBCC,stroke:#CC622D,stroke-width:2px,color:#7A2600
- Validate: flowchart TD code complete; all paths end with endCall; 0 unresolved q_* nodes; no undefined node references.

Step 2: Character Profile
- Demographics: Name; Age; Location; Living Situation
- Financial: Employment; Income Source; Financial Stress; Loan Status
- Optional: Service affiliation; Household; Bio notes
- Verification (if account info): property address; emails (+pronunciation if needed); last four SSN; DOB; borrower roles
- Validate: for full verification, list ≥2 strong identifiers; emails clear.
- JSON: characterInformation.customerPersona; .house; .financialInformation; .otherInformation; .verificationInformation.information

Step 3: Personality
- Traits: Emotional State; Communication Style; Patience; Tech Savviness
- Optional: Triggers (escalate/de-escalate)
- Tone: primary (and secondary if using toneConversion)
- Validate: include toneConversion if tone shifts are planned.
- JSON: characterInformation.tone

Step 5: Tools
- Always: askTeamLead; endCall
- Choose exactly one: evaluationMode or reviewMode
- As needed: loanOfficerTransfer; servicingHelpTransfer + servicingHelpRepresentative; paymentProcessingTransfer + paymentProcessingRepresentative; toneConversion; hangUpOnRepresentative
- For each tool: inclusion rationale; voice; triggers; instructions; nested personas if any
- Validate: toneConversion ⇔ multi-tone triggers; transfer chains correct.
- JSON: callInformation.simulationTools

Step 6: Evaluation Criteria
- Defaults:
  - introduction: thank caller; introduce self (first name); ask who you’re speaking with
  - basicVerification: verify [First, Last, State] (or current policy)
  - goodbye: warm goodbye/thanks
- Conditional:
  - fullVerification: requiredInformation; otherInformation
  - myVUVerification: verify email; reset/enroll
  - Procedure-specific: e.g., servicingProcedure, myVUProcedure, transferProcedure
- Custom: de-escalation, empathy, etc.
- Validate: coverage of success path; avoid duplicates.
- JSON: callInformation.simulationGoals

Step 7: Final Assembly
- Convert all of the information gathered from the user to create a JSON file that matches the format of the scenarios in ScenarioCompilation.xlsx